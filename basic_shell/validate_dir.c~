#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h>
#include <stdlib.h>

void validate_dir(void);

int main(void)
{
	validate_dir();
	return (0);
}
/**
 *validate_dir - validate command dir
 *
 *Return: 0
 */

void validate_dir(void)
{
	struct stat ptr;
	char dir[] = "PATH=ls:-l:/usr/bin:usr/local/sbin:usr/sbin/sbin";
	char *usr_cmd = "/ls";
	char **tokens;
	char *token;
	char buf[21];
	int i, j, k, l, status;
	pid_t cid;

	tokens = (char **)malloc(sizeof(char *) * 6);
	if (tokens == NULL)
	{
		exit(1);
	}
	for (j = 0; j < 5; j++)
	{
		tokens[j] = (char *)malloc(sizeof(char) * 17);
		if (tokens[j] == NULL)
		{
			while (j > 0)
			{
				free(tokens[j--]);
			}
			/* free_grid(tokens, 50); */
			exit(1);
		}
	}

	token = strtok(dir, "=:");
	k = 0;
	while (tokens[k] != NULL)
	{
		tokens[k] = token;
		token = strtok(NULL, ":");
		k++;
	}
	tokens[k] = NULL;

	l = 0;
	while (tokens[l] != NULL)
	{
		printf("Token[%d]: %s\n", tokens[l]);
		l++;
	}

	cid = fork();

	if (cid == -1)
		exit(1);

	else if (cid == 0)
	{
		i = 0;
		while (tokens[i] != NULL)
		{
			strcpy(buf, tokens[i]);
			strcat(buf, usr_cmd);

			if (stat(buf, &ptr) == 0)
			{
				if (access(buf, F_OK | X_OK) == 0)
				{
					printf("access checked!!");
					execve(buf, tokens, NULL);
				}
				perror("Failed");
			}
			else
				printf("Next dir...\n");
			i++;
		}
	}
	else
		wait(&status);
}
